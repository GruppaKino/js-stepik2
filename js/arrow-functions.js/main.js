/*
Стрелочные функции => Это простой и лаконичный синтаксис для создания функций, который часто лучше, чем Function Expression

Можно сказать, что стрелочные функции - это просто упрощенные (в визуальном виде) function expression
*/

let funcArrow = (arg1, arg2) => arg1 + arg2;

/*
Способ сокращения стрелочной функции
Написание стрелочной функции можно сократить
1. Если используется только 1 параметр, то тожно не обрамлять его в круглые скобки.Если парамтров нет или их больше одного круглые скобки обязательны.
Пример: const myArrowFn = a => console.log(a); - параметр только 1, поэтому нет кргулых скобок
2. Если тело функции (то что в фигунрных скобках) занимает одну строку, фигурные скобки можно не писать
const myArrowFn = (a + b) => a + b;
console.log(myArrowFn(5, 5)); // В консоле получим число 10
3. Если тело функции в одну строку, т.е. без фигурных скобок, инструкция return создается автоматически
*/

'use strict'

function ask(quest, yes, no) {
    if (confirm(quest)){
        yes()
    } else {
        no()
    }
}

// ask('Вы согласный?', () => alert('Спасибо за ответ!'), () => alert('Очень жаль('));

let sum = (a, b) => a +b;

console.log(sum(1, 1));

/*
Итоги:
Есть 2 типа функций:
Function Expression - анонимные функции. Можно вызвать только после создания функции. => Стрелочные функции
Function Declaration - Функции с отдельным именем, их можно вызвать до создания функции (Выше по коду)
==
Функции - Колбэки = Функции которые используются в качестве параметров для других функций

*/